%% kyoto.satyh
%%
%% SLyDIFi theme file.

@require: gr
@require: annot
@require: base/color-ext
@require: base/int
@require: base/inline
@require: base/block
@require: colorbox/colorbox
@require: class-slydifi/slydifi
@require: class-slydifi/footnote
@require: enumitem/enumitem
@require: list

type kyoto-config = (|
  footer-right: inline-text; 

  enable-total-pagenum : bool;

  font-normal : context -> context;
  font-bold : context -> context;
  font-code : context -> context;
  font-slide-title : context -> context;
  font-slide-author : context -> context;
  font-slide-affiliation : context -> context;
  font-slide-date : context -> context;
  font-section-title : context -> context;
  font-frame-title : context -> context;
  font-footer : context -> context;
  font-footnote : context -> context;

  color-bg : color;
  color-fg : color;
  color-emph : color;
  color-link : color;
  color-title : color;
  color-theme : color;
  color-separator : color;
  color-section-ribbon : color;
  color-section-ribbon-intersect : color;

  length-frame-title-height : length;
  length-frame-title-left-margin : length;
  length-frame-title-bot-margin : length;
  length-frame-body-top-margin : length;
|)


module SlydifiThemeKyoto: sig

  val layout: frame-layout
  val document: block-text -> document

% config
  val config: kyoto-config SlydifiParam.t
  val default-config: kyoto-config
  direct +set-config : [kyoto-config] block-cmd
  direct \set-config : [kyoto-config] inline-cmd
  direct +with-config : [kyoto-config; block-text] block-cmd
  direct \with-config : [kyoto-config; inline-text] inline-cmd

% frames
  %% スライドマスター。
  val frame-master: kyoto-config -> unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-footer: kyoto-config -> unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  val frame-slide-title: kyoto-config ->
    ((| title: inline-text list; author: inline-text list; affiliation: inline-text list; date: inline-text list; logo-path: string option; logo-width: length|))
      Frame.frame
  %% セクションフレーム。
  % val frame-section-title: layout-slydifi-theme ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: kyoto-config -> ((| title: inline-text; inner: block-text |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; affiliation: inline-text list; date: inline-text list; logo-path: string option; logo-width: length;|);] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +section : [inline-text list; block-text;] block-cmd
  direct +frame : [int?; inline-text; block-text;] block-cmd

% alert
  % direct +alert : [color?; inline-text list] block-cmd
  direct +right: [(int -> bool)?; inline-text list] block-cmd
  direct +center: [(int -> bool)?; inline-text list] block-cmd
  direct \center: [(int -> bool)?; inline-text] inline-cmd
  direct \reverse-color: [inline-text] inline-cmd

  direct +quote: [(int -> bool)?; inline-text] block-cmd

% inline commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd

% listing
  direct +oitem : [(int -> bool); inline-text; block-text] block-cmd

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let page-num = SlydifiParam.make 0

  let layout = (|
    paper-width = 254mm;
    paper-height = 142.9mm;
    text-width = 254mm -' 40pt;
    text-height = 142.9mm -' 20pt;
    text-horizontal-margin = 20pt;
    text-vertical-margin = 10pt;
  |)
  let xrel xfloat = layout#paper-width *' xfloat
  let yrel yfloat = layout#paper-height *' yfloat
  let rel xfloat yfloat = (xrel xfloat, yrel yfloat)

% configuration
  let default-config =
    let set-font-metrics fsize ctx =
      ctx |> set-font-size fsize
          |> set-paragraph-margin (fsize *' 0.6) (fsize *' 0.6)
          |> set-leading (fsize *' 1.4)
    in
    let default-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
    in
    let code-font ctx =
      ctx |> set-font Latin          (`lmmono`, 1.0, 0.0)
          |> set-font Kana           (`lmmono`, 1.0, 0.0)
          |> set-font HanIdeographic (`lmmono`, 1.0, 0.0)
    in
    let bold-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Bold`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
    in

    (|
      footer-right = {}; 

      enable-total-pagenum = true;

      font-normal = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt];
      font-bold = SlydifiScheme.apply-font-cfg [bold-font];
      font-code = SlydifiScheme.apply-font-cfg [code-font];
      font-slide-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 42pt];
      font-slide-author = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt;];
      font-slide-affiliation = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 18pt;];
      font-slide-date = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 20pt;];
      font-section-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 48pt];
      font-frame-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 36pt];
      font-footer = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 14pt;];
      font-footnote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 12pt;];

      color-bg = Color.of-css `#EEEEEE`;
      color-fg = Color.of-css `#222222`;
      color-emph = Color.of-css `#ff0027`;
      color-link = Color.of-css `#2d539e`;
      color-title = Color.of-css `#081F57`;
      color-theme = Color.of-css `#081F57`;
      color-separator = Color.of-css `#555555`;
      color-section-ribbon = Color.of-css `#aaaaaa`;
      color-section-ribbon-intersect = Color.of-css `#666666`;

      length-frame-title-height = 42pt;
      length-frame-title-left-margin = 10pt;
      length-frame-title-bot-margin = 10pt;
      length-frame-body-top-margin = 14pt;
    |)

  let config = SlydifiParam.make default-config

  let-block +set-config cfg = '< +SlydifiParam.set-param(config)(cfg); >
  let-inline \set-config cfg = { \SlydifiParam.set-param(config)(cfg); }
  let-block +with-config cfg bt = '< +SlydifiParam.with-param(config)(cfg)(bt); >
  let-inline \with-config cfg it = { \SlydifiParam.with-param(config)(cfg)(it); }

  let-inline ctx \code code =
    let config = SlydifiParam.get config in
    let ctx =
      ctx |> config#font-code
          |> set-text-color config#color-fg
    in
    let fsize = get-font-size ctx in

    script-guard Latin (read-inline ctx (embed-string code))

  let document bt =
    let config = SlydifiParam.get config in
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    let init-ctx ctx =
      ctx |> config#font-normal
          |> set-text-color config#color-fg
          |> set-code-text-command (command \code)
    in
    SlydifiScheme.document-scheme layout init-ctx hookf bt

% frames

  let frame-master config =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, yrel 0.98) (xrel 1.0, yrel 1.0)
          |> fill config#color-theme;
        Gr.rectangle (0pt, yrel 0.0) (xrel 1.0, yrel 0.08)
          |> fill config#color-theme;
      ])
    in
    Frame.make layout f

  let frame-master-with-footer config =
    let f ctx () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let pagenum = SlydifiParam.get page-num in
      let total = get-cross-reference `pagecount` |> Option.from `1` in

      let gr-footer-right =
        let it-footer-right = config#footer-right in
        let footer-right = config#font-footer ctx |> set-text-color config#color-bg in
        let ib = read-inline footer-right it-footer-right in
        let pos = (xrel 1.0 -' 10pt, 12pt) in
        SlydifiGraphics.put-text (1., 0.) pos ib
      in

      let gr-page-number =
        let it-pagenum = pagenum |> arabic |> embed-string in
        let it-total = embed-string total in
        let ctx-pagenum = config#font-footer ctx |> set-text-color config#color-bg in
        let ib = read-inline ctx-pagenum
          (if config#enable-total-pagenum then
            {#it-pagenum;/#it-total;}
          else
             it-pagenum)
        in
        let pos = (xrel 0.5, 12pt) in
        SlydifiGraphics.put-text (1., 0.) pos ib
      in

      (block-nil, [gr-frame-master; gr-footer-right; gr-page-number; ] |> List.concat)
    in
    Frame.make layout f

  let frame-slide-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let title-mgn = 24pt in

      let block-logo = 
        match content#logo-path with
        | None -> '<>
        | Some(logo-path-str) -> '<
          +fig-abs-pos((xrel 1.0 -' content#logo-width -' config#length-frame-title-left-margin, yrel 0.85)) (FigBox.include-image content#logo-width logo-path-str);
        >
      in

      let gr-bgs = [
        Gr.rectangle (0pt, yrel 0.85) (xrel 1.0, yrel 1.0) |> fill config#color-theme;
      ]
      in

      let gr-title =
        let ctx = ctx |> config#font-slide-title |> set-text-color config#color-fg in
        let iblst = content#title |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.45 +' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 0.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-author =
        let ctx = ctx |> config#font-slide-author |> set-text-color config#color-fg in
        let iblst = content#author |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.45 -' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-affiliation =
        let ctx = ctx |> config#font-slide-affiliation |> set-text-color config#color-fg in
        let iblst = content#affiliation |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.35 -' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-date =
        let ctx = ctx |> config#font-slide-date |> set-text-color config#color-fg in
        let iblst = content#date |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.2) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      (read-block ctx block-logo, [gr-frame-master; gr-bgs; gr-title; gr-author; gr-affiliation; gr-date] |> List.concat)
    in
    Frame.make layout f

  let frame-section-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      % 設定
      let title-mgn = 24pt in
      let ribbon-width = 5pt in
      let hribbon-t = yrel 0.45 in
      let hribbon-b = yrel 0.45 -' ribbon-width in
      let vribbon-r = xrel 0.1 in
      let vribbon-l = xrel 0.1 -' ribbon-width in

      let gr-titles =
        let ctx = ctx |> config#font-section-title 
                      |> set-text-color config#color-fg in
        let iblst = content#title |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.5) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 0.5); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      (block-nil, [gr-frame-master; gr-titles] |> List.concat)
    in
    Frame.make layout f

  let frame-normal config =
    let f ctx content =
      % frame-master-with-footer の graphics list を踏襲する
      let (_, gr) = frame-master-with-footer config |> Frame.embed ctx () in

      let title-ymin = layout#paper-height -' config#length-frame-title-height -' 10pt in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx |> config#font-frame-title in
        let ib-title = read-inline ctx-title content#title in
        SlydifiGraphics.put-texts
          (| align = (0.5, 0.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            (xrel 0.5, title-ymin) [ib-title]
      in

      % 中身のブロックボックス列
      let bb-inner =
        let ctx = ctx |> config#font-normal in
        let bb-blank skip =
          line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-fil
        in
        bb-blank (config#length-frame-title-height +' config#length-frame-body-top-margin)
          +++ (read-block ctx content#inner)
      in


      (bb-inner, [gr; gr-title] |> List.concat)

    in
    Frame.make layout f

% frame commands

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title (SlydifiParam.get config))(1)(content);
    >

  let-block ctx +section title inner =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title (SlydifiParam.get config))(1)(|title = title;|);
      #inner;
    >

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal (SlydifiParam.get config))(n-frame)(|title = title; inner = inner|);
    >

% listing
  let-block +oitem dcf it bt =
    '< +ghost(dcf)< +item(it)(bt); > >

% align
  let-block ctx +right ?:dcf its =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let centered-list = List.map (fun it -> (inline-fil ++ (read-inline ctx it))) its in
    let it = List.fold-left (fun concat each -> concat ++ (read-inline ctx {\br;}) ++ each) (Option.unwrap-or inline-nil (List.head centered-list)) (Option.unwrap-or [] (List.tail centered-list)) in
    SlydifiOverlay.ghost-block dcf (line-break true true ctx it)

  let-block ctx +center ?:dcf its =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let centered-list = List.map (fun it -> (inline-fil ++ (read-inline ctx it) ++ inline-fil)) its in
    let it = List.fold-left (fun concat each -> concat ++ (read-inline ctx {\br;}) ++ each) (Option.unwrap-or inline-nil (List.head centered-list)) (Option.unwrap-or [] (List.tail centered-list)) in
    SlydifiOverlay.ghost-block dcf (line-break true true ctx it)

  let-inline ctx \center ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    SlydifiOverlay.ghost-inline dcf (inline-fil ++ (read-inline ctx it) ++ inline-fil)

% others
  let-inline ctx \reverse-color it =
    let config = SlydifiParam.get config in
    let ctx = ctx |> set-text-color config#color-bg in
    read-inline ctx it

  let-block ctx +quote ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let quote-it = {「#it;」} in
    SlydifiOverlay.ghost-block dcf (line-break true true ctx (inline-fil ++ read-inline ctx quote-it ++ inline-fil))

% inline commands
  let-inline ctx \emph ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> config#font-bold
            |> set-text-color config#color-emph
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \textbf ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (config#font-bold ctx) ctx
    in
    read-inline ctx2 it

  let-inline ctx \link ?:text url =
    let config = SlydifiParam.get config in
    match text with
    | Some(text) ->
        let ctx =
          ctx |> set-text-color config#color-link
        in
        read-inline ctx {\href(url)(text);}
    | None ->
        let text = embed-string url in
        let ctx =
          ctx
            |> config#font-code
            |> set-text-color config#color-link
        in
        read-inline ctx {\href(url)(text);}

% \footnote{} command

  let-inline ctx \footnotetext ref-label it =
    let config = SlydifiParam.get config in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let config = SlydifiParam.get config in
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

end

let document = SlydifiThemeKyoto.document

